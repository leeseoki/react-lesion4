{"version":3,"sources":["LifeCycle.js","serviceWorker.js","index.js"],"names":["LifeCycle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","setTime","bind","assertThisInitialized","setState","react_default","a","createElement","onClick","LifeCycle_Content","myTime","React","Component","Content","console","log","newProps","newState","nextProps","nextState","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","src_LifeCycle","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEMA,cACL,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAECQ,MAAQ,CACVC,KAAM,GAGTR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPFA,yEAWbG,KAAKS,SAAS,CAACJ,KAAML,KAAKI,MAAMC,KAAO,qCAIzC,OACKK,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAQC,QAAWb,KAAKM,SAAxB,iBACAI,EAAAC,EAAAC,cAACE,EAAD,CAASC,OAAUf,KAAKI,MAAMC,eAnBnBW,IAAMC,WAyBxBC,+LAEJC,QAAQC,IAAI,qEAGVD,QAAQC,IAAI,0EAEWC,GACvBF,QAAQC,IAAI,+EAEOC,EAAUC,GAC7B,OAAO,8CAEUC,EAAWC,GAC5BL,QAAQC,IAAI,qEAEIK,EAAWC,GAC3BP,QAAQC,IAAI,wEAGZD,QAAQC,IAAI,4DAIb,OACGV,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAKZ,KAAKJ,MAAMmB,gBA1BHC,IAAMC,WAgCbtB,IC/CKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3dee77b.chunk.js","sourcesContent":["import React from 'react';\n\nclass LifeCycle extends React.Component {\n\tconstructor(props) {\n    \tsuper(props);\n      \n      \tthis.state = {\n         \tdata: 0\n      \t}\n\n      \tthis.setTime = this.setTime.bind(this)\n   };\n\n   \tsetTime() {\n      \tthis.setState({data: this.state.data + 1})\n   \t}\n\n   \trender() {\n    \treturn (\n         \t<div>\n            \t<button onClick = {this.setTime}>Increase Time</button>\n            \t<Content myTime = {this.state.data}></Content>\n         \t</div>\n      \t);\n   \t}\n}\n\nclass Content extends React.Component {\n\tcomponentWillMount() {\n\t\tconsole.log('Component WILL MOUNT!')\n\t}\n\tcomponentDidMount() {\n\t  \tconsole.log('Component DID MOUNT!')\n\t}\n\tcomponentWillReceiveProps(newProps) {    \n\t  \tconsole.log('Component WILL RECIEVE PROPS!')\n\t}\n\tshouldComponentUpdate(newProps, newState) {\n\t  \treturn true;\n\t}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t  \tconsole.log('Component WILL UPDATE!');\n\t}\n\tcomponentDidUpdate(prevProps, prevState) {\n\t  \tconsole.log('Component DID UPDATE!')\n\t}\n\tcomponentWillUnmount() {\n\t  \tconsole.log('Component WILL UNMOUNT!')\n\t}\n\n\trender() {\n\t  return (\n\t     <div>\n\t        <h3>{this.props.myTime}</h3>\n\t     </div>\n\t  );\n\t}\n}\n\nexport default LifeCycle;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LifeCycle from './LifeCycle';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LifeCycle />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}